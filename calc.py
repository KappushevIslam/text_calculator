from math import sin, cos, tan, factorial, pi


def convert(digit):
    digit_in_str = []
    for i in digit:
        val = str(len(digit) - digit.index(i) - 1) + ' ' + i
        if val == '1 1' or val == '1 один':
            digit_in_str += [i + digit[digit.index(i) + 1]]
            break
        digit_in_str += [val]
        digit = digit.replace(i, '', 1)
    return digit_in_str


def nums_to_words(dig):
    d1 = {'0 1': 'один', '0 2': 'два', '0 3': 'три', '0 4': 'четыре', '0 5': 'пять', '0 6': 'шесть', '0 7': 'семь', '0 8': 'восемь',
          '0 9': 'девять', '10': 'десять', '11': 'одинннаддцать', '12': 'двенадцать', '13': 'тринадцать', '14': 'четырнадцать',
          '15': 'пятнадцать', '16': 'шестнадцать', '17': 'семнадцать', '18': 'восемнадцать', '19': 'девятнадцать',
          '1 2': 'двадцать', '1 3': 'тридцать', '1 4': 'сорок', '1 5': 'пятьдесят', '1 6': 'шестьдесят', '1 7': 'семьдесят',
          '1 8': 'восемьдесят', '1 9': 'девяноста', '2 1': 'сто', '2 2': 'двести', '2 3': 'триста', '2 4': 'четыреста',
          '2 5': 'пятьсот', '2 6': 'шестьсот', '2 7': 'семьсот', '2 8': 'восемьсот', '2 9': 'девятьсот', '3 1': 'тысяча',
          '3 2': 'две тысячи', '3 3': 'три тысячи', '3 4': 'четыре тысячи', '3 5': 'пять тысяч', '3 6': 'шесть тысяч',
          '3 7': 'семь тысяч', '3 8': 'восемь тысяч', '3 9': 'девять тысяч', '4 1': 'десять', '4 2': 'двадцать', '-': 'минус',
          '4 3': 'тридцать', '4 4': 'сорок', '4 5': 'пятьдесят', '4 6': 'шестьдесят', '4 7': 'семьдесят', '4 8': 'восемьдесят',
          '4 9': 'девяноста', '3 0': 'тысяч', '5 1': 'сто', '5 2': 'двести', '5 3': 'триста', '5 4': 'четыреста',
          '5 5': 'пятьсот', '5 6': 'шестьсот', '5 7': 'семьсот', '5 8': 'восемьсот', '5 9': 'девятьсот', '0 0': 'ноль'}
    d_float = {1: '', 2: 'сотых', 3: 'тысячных', 4: 'десятитысячных', 5: 'стотысячных', 6: 'миллионных'}
    # дописать словаь до миллиарда
    dig = str(dig)
    res = ''
    if '.' in dig:
        dig1 = dig[:dig.index('.')]
        dig2 = dig[dig.index('.') + 1:]
        dig_in_str = convert(dig1)
        for i in dig_in_str:
            try:
                res += d1[i] + ' '
            except KeyError:
                continue
        res += 'целых '
        dig_in_str = convert(dig2)
        for i in dig_in_str:
            try:
                res += d1[i] + ' '
            except KeyError:
                continue
        res += d_float[len(dig2)]
    else:
        dig_in_str = convert(dig)
        for i in dig_in_str:
            try:
                res += d1[i] + ' '
            except KeyError:
                continue
    return res


def calc(user_operation):
    user_operation = user_operation.split()
    d = {'(': '(', "плюс": "+", "умножить": "*", "минус": "-", "делить": "/", 'один': '1', 'два': '2', 'три': '3',
         'четыре': '4', 'пять': '5', 'шесть': '6', 'семь': '7', 'восемь': '8', 'девять': '9', 'десять': '10', 'одиннадцать':
         '11', 'двенадцать': '12', 'тринадцать': '13', 'четырнадцать': '14', 'пятнадцать': '15', 'шестнадцать': '16',
         'семнадцать': '17', 'восемнадцать': '18', 'девятнадцать': '19', 'двадцать': '2', 'тридцать': '3', 'сорок': '4',
         'пятьдесят': '5', 'шестьдесят': '6', 'семьдесят': '7', 'восемьдесят': '8', 'девяносто': '9', 'сто': '1',
         'двести': '2', 'триста': '3', 'четыреста': '4', 'пятьсот': '5', 'шестьсот': '6', 'семьсот': '7', 'восемьсот': '8',
         'девятьсот': '9', '+': '+', 'синус': 'sin', 'косинус': 'cos', 'тангенс': 'tan', 'пи': 'pi', 'степени': '**',
         'десятая': '/10)', 'десятых': '/10)', 'сотая': '/100)', 'сотых': '/100)', 'тысячная': '/1000)', 'тысячных': '/1000)',
         'десятитысячная': '/10000)', 'десятитысячных': '/10000)', 'стотысячная': '/100000)', 'стотысячных': '/100000)',
         'миллионная': '/1000000)', 'миллионных': '/1000000)', 'одна': '1', 'две': '2', 'вторая': '/2', 'третья': '/3',
         'третьих': '/3', 'четвертая': '/4', 'четвертых': '/4', 'пятая': '/5', 'пятых': '/5', 'шестая': '/6', 'шестых': '/6',
         'седьмая': '/7', 'седьмых': '/7', 'восьмая': '/8', 'восьмых': '/8', 'девятая': '/9', 'девятых': '/9', 'факториал':
         'factorial', 'ноль': '0', 'по': ' ', 'открывается': '(', 'закрывается': ')'}
    operations = ['плюс', 'минус', 'делить', 'умножить']
    oper_str = ''
    c = 0
    i_in_user_op = user_operation.count('и')
    op_index = 0
    res = ''
    for i in range(len(user_operation) - 1):
        if user_operation[i] in operations:
            op_index = i
        if user_operation[i + 1] == 'и' and c < i_in_user_op:
            user_operation[i + 1] = '+'
            user_operation.insert(op_index + 1 if op_index > 0 else op_index, '(')
            c += 1
    print(user_operation)
    for i in user_operation:
        if i in d:
            oper_str += d[i]
    if 'размещение' in user_operation:
        combin_lst = oper_str.split(' ')
        res = factorial(int(combin_lst[0])) // (factorial(int(combin_lst[0]) - int(combin_lst[1])))
    elif 'сочетание' in user_operation:
        combin_lst = oper_str.split(' ')
        res = factorial(int(combin_lst[0])) // (factorial(int(combin_lst[1])) * (factorial(int(combin_lst[0]) - int(combin_lst[1]))))
    elif 'перестановка' in user_operation:
        res = factorial(int(oper_str))
    else:
        try:
            res = eval(oper_str)
        except ZeroDivisionError:
            return 'Деление на 0 невозможно'
        except SyntaxError:
            if oper_str.count('(') != oper_str.count(')'):
                return 'Неккоректная вложенность скобок. Количество открывающих скобок не равно количеству закрывающих '
    if type(res) == float:
        res = round(res, 4)
    print(res)
    res = nums_to_words(res)
    if res[-5:] == 'ноль ':
        res = res[:-5]
    return res


print(calc(input()))
